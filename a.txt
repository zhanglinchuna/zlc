11111
222222222

https://blog.csdn.net/qq_21383435/article/details/82934813
https://blog.csdn.net/ws008/article/details/80007949
https://www.cnblogs.com/guchunchao/p/9880528.html
https://blog.csdn.net/ShuSheng0007/article/details/81269295
https://www.cnblogs.com/duanxz/p/3571217.html
https://my.oschina.net/itblog/blog/495253
https://blog.csdn.net/try_try_try/article/details/80500211    --springboot自动配置原理
https://www.cnblogs.com/hhcode520/p/9450933.html    --springboot自动配置原理

https://segmentfault.com/a/1190000004343063?_ea=575820
https://www.e-learn.cn/content/qita/922334
https://blog.csdn.net/j080624/article/details/80016905
https://my.oschina.net/u/3574106/blog/1819394
https://www.cnblogs.com/weibanggang/p/10157030.html
https://www.e-learn.cn/content/qita/800708

https://segmentfault.com/a/1190000013341344#articleHeader0 --spring事务管理




public static Object getCloneObject(Object bean) {
    Object cloneBean = null;

    try {
        ByteArrayOutputStream byout = new ByteArrayOutputStream();
        ObjectOutputStream obj = new ObjectOutputStream(byout);
        obj.writeObject(bean);
        ByteArrayInputStream byin = new ByteArrayInputStream(byout.toByteArray());
        ObjectInputStream ins = new ObjectInputStream(byin);
        cloneBean = ins.readObject();
    } catch (Throwable var6) {
        var6.printStackTrace();
    }

    return cloneBean;
}





